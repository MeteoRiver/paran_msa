server:
  port: 8000
uri:
  chatServiceUri: http://localhost:8081
  commentServiceUri: http://localhost:8084
  groupServiceUri: http://localhost:8085
  fileServiceUri: http://localhost:9002
  roomServiceUri: http://localhost:8083
  userServiceUri: http://localhost:8082

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  springdoc:
    api-docs:
      enabled: false

  logging:
    level:
      org.springframework.security: DEBUG

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect

  config:
    activate:
      on-profile: default

  application:
    name: api

  security:
    default-filter-chain: true     # Spring Security 기본 필터 체인 사용
    user:
      name: a              # 기본 사용자 이름
      password: a

    oauth2:
      client:
        registration:
          naver:
            client-name: naver
            client-id: p73aeOZEmmQhVd6bQB5Q
            client-secret: OTxAoYQZ69
            redirect-uri: http://localhost:8000/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope: name,email

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  main:
    allow-bean-definition-overriding: true
    web-application-type: reactive

  cloud:
    gateway:
      routes:
        - id: chat-service
          uri: lb://chat-service
          predicates:
            - Path=/chats/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - RemoveRequestHeader=Cookie

        - id: comment-service
          uri: lb://comment-service
          predicates:
            - Path=/comments/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - RemoveRequestHeader=Cookie

        - id: file-service
          uri: lb://file-service
          predicates:
            - Path=/files/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - RemoveRequestHeader=Cookie

        - id: group-service
          uri: lb://group-service
          predicates:
            - Path=/api/groups/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - RemoveRequestHeader=Cookie

        - id: room-service
          uri: lb://room-service
          predicates:
            - Path=/rooms/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - RemoveRequestHeader=Cookie

        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/users/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - RemoveRequestHeader=Cookie


  jwt:
    issuer: paranmanzang.com
    secret: 80d0f49aacda55f952ff27acda9974f057378ae16a528b0ac35593652b1983b7
    refreshSecret: cda97378ae16a99745f952ffb0ac3573785593652b80da55f9974f365952b52b
    expired:
      access: 86400
      refresh: 120000


  management:
    endpoints:
      web:
        exposure:
          include: "*" # refresh, health, beans, env, info, metrics, trace, dump, heapdump, loggers, audit-events, httptrace, threaddump
          # 테스트를 위해 actuator의 모든 endpoint를 노출합니다.
    endpoint:
      shutdown:
        enabled: true
      info:
        enabled: true
      health:
        enabled: true
      beans:
        enabled: true
      httpexchange:
        enabled: true

    health:
      circuitbreakers:
        enabled: true #circuitbreakers 상태를 확인합니다.

  resilience4j:
    circuitbreaker:
      configs:
        default:
          slidingWindowType: COUNT_BASED
          slidingWindowSize: 10
          failureRateThreshold: 50
          permittedNumberOfCallsInHalfOpenState: 5
          registerHealthIndicator: true
          # slidingWindowType
          # 기본은 COUNT_BASED 이며 TIME_BASED로 사용할 수 있습니다.
          # slidingWindowSize
          # COUNT_BASED라면 array 크기이며 TIME_BASED라면 초 입니다.
          # failureRateThreshold: 50
          # 실패율 임계값을 설정합니다.
          # 해당 %가 넘거나 같아지면 circuitBreaker의 상태가 Open으로 변경되며
          # 실제 코드를 호출하지 않고 fallback 또는 fail 처리 됩니다.
          # permittedNumberOfCallsInHalfOpenState
          # circuit이 HALF_OPEN 상태일 때 허용되는 call 수


  profiles:
    config:
      import: optional:configserver:http://localhost:8888

  data:
    redis:
      host: localhost   # Redis 서버 호스트
      port: 6379        # Redis 서버 포트
      username: root      # Redis 서버 사용자 이름 (필요한 경우)
      password: password    # Redis 서버 비밀번호
      lettuce:
        pool:
          max-active: 8       # 최대 활성 연결 수
          max-idle: 8         # 최대 유휴 연결 수
          min-idle: 0         # 최소 유휴 연결 수
          max-wait: 10000ms   # 최대 대기 시간 (밀리초)

    mongodb:
      uri: mongodb://root:1234@127.0.0.1:27017/parandb?authSource=admin

logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        orm.jdbc.bind: TRACE
      springframework:
        data:
          mongodb:
            core:
              MongoTemplate: DEBUG
        security: DEBUG
        web: DEBUG
      spring:
        security: DEBUG
